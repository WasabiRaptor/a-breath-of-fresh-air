...  = Means the element above it is repeated a variable ammount of time.
       Or can also mean I have no clue how that struct is laid out.

==========================================================
mappa_*.bin
==========================================================
Thanks to Aissurteivos, Ogregunner, and etc for their research
https://github.com/Aissurteivos/mdrngzer/blob/master/doc/rom.md
http://www.gamefaqs.com/boards/938930-pokemon-mystery-dungeon-explorers-of-darkness/50597686


The format of the mappa_*.bin files are all similar. They seems to handle each a certain amount of dungeons.
Each mappa_*.bin file seems to have a matching companion mappa_g*.bin file.

----------------------------------------------------------
Structure 
----------------------------------------------------------

Offset      Name                    Size            Type            Description
----------  ----                    ----            ----            -----------
SIR0Header                          16              -               The standard SIR0 header.
[
    0x00    magicn                  4               -               "SIR0"
    0x04    ptrsubhdr               4               uint32          Pointer to the subheader.
    0x08    ptrptrofftbl            4               uint32          Pointer to the encoded pointer offset table.
    0x0C    null                    4               -               4 bytes of zeros.
]
DungeonDataBlock            (ptrDungeonLUT - 16)                    Contains the dungeon's list of floor entries.
[
    DungeonEntry                    varies                          Contains references/indices to each data entries providing info for this dungeon floor.
    [
        NullFloorEntry              18              -               18 bytes of 0! Seems to be used to tell where the previous entry ends.
        FloorEntry                  18              -               Contains data for a single floor.
        [
        0x00 idfloordata             2               uint16          Floor terrain data index.
        0x02 idpkspwn                2               uint16          Index of pokemon spawn data for this floor.
        0x04 idlutc                  2               uint16          Possibly trap data index? This index is used in the LUTC.
        0x06 iditemspwn              2               uint16          Item spawn data index for this floor.
        0x08 idshopdat               2               uint16          Shop item index.
        0x0A idmhouseitem            2               uint16          Monster house item index.
        0x0C idburieditemsdat        2               uint16          Index to buried item data?
        0x0E unk2                    2               uint16          unknown
        0x10 unk3                    2               uint16          unknown
        ]
        ...
    ]
    ...
]
DungeonLUT      (ptrFloorDataBlock - ptrDungeonLUT)                 A look up table for the dungeon whose data this file contains.
[
    ptrdungeon                      4               uint32          A pointer to a dungeon's data entry within DungeonDataBlock.
    ...
]
FloorDataBlock
[
    FloorDataEntry                  32                              A single entry for a single floor of a dungeon.
    [
    0x00 floorshape                  1               uint8           A value from 0x0 to 0xF that indicates the overall shape of the floor. See below.
    0x01 unk4                        1               uint8           
    0x02 tilesetid                   1               uint8           Tileset used for the floor.
    0x03 musicid                     1               uint8           The id of the music played on the floor.
    0x04 defaultweather              1               uint8           The weather forced upon entering the floor.
    0x05 unk5                        1               uint8           
    0x06 pkmndensity                 1               uint8           Apparently the initial pokemon density.
    0x07 shopratio                   1               uint8           Chances of shop spawning.
    0x08 mhouseratio                 1               uint8           Chances of monster houses spawning.
    0x09 unk6                        1               uint8           
    0x0A unk7                        1               uint8           
    0x0B unk8                        1               uint8           
    0x0C unk9                        1               uint8           Tied to water in rooms?
    0x0D unk10                       1               uint8           
    0x0E unk11                       1               uint8           
    0x0F itemdensity                 1               uint8           Item density?
    0x10 trapdensity                 1               uint8           Trap density?
    0x11 floorcnt                    1               uint8           floor counter???
    0x12 unk12                       1               uint8           Possibly floor event type?
    0x13 unk13                       1               uint8           
    0x14 burieditemdensity           1               uint8           Buried item density.
    0x15 waterratio                  1               uint8           Water ratio.
    0x16 darklvl                     1               uint8           Darkness level.
    0x17 maxcoin                     1               uint8           Maximum of coins in steps of 40??
    0x18 unk14                       1               uint8           
    0x19 unk15                       1               uint8           
    0x1A unk16                       1               uint8           
    0x1B unk17                       1               uint8           
    0x1C enemyiq                     2               uint16         (Not sure what they mean here..)
    0x1E unk18                       1               uint8          
    0x1F unk19                       1               uint8           
    ]
    ...
]
PkmnSpwnLsts
[
    PkmnSpawnList
    [
        PkmnSpawnEntry              8                -               A single entry that defines a spawnable pokemon. Might also be used to pre-cache pokemon sprites.
        [
        0x00 unk20                  1                uint8           Unknown. Often 0. Possibly a marker?
        0x01 lvlmult                1                uint8           This multiplied times 2 sets the level of the pokemon spawned.
        0x02 spwnrte                2                uint16          Has something to do with spawn probabilities.
        0x04 spwnrte2               2                uint16          Has something to do with spawn probabilities.
        0x06 pkmnid                 2                uint16          The pokemon/entity id of the pokemon to spawn.
        ]
        ...
        PkmnSpawnEntryEnd           8                -               8 bytes of 0 to mark the end of the list.
        [
        0x00 nullbytes              8                -               zeroes.
        ]
    ]
    ...
]
PkmnSpwnLUT                         vary            -                A table of pointers pointing within PkmnSpwnLsts. Each represent a spawn list.
[
    ptrpkspwnlst                    4               uint32           Pointer to a PkmnSpawnList.
    ...
]
DataBlockC
[
    Entry                           50                                 
    [
    ]
    ...
]
LUTC                                -               -               Contains pointers pointing within DataBlockC.
[
    ptrunk                          4               uint32          unknown
    ...
]
ItemSpawnLists
[
    ItemSpawnList
    [
    
        ...
    ]
    ...
]
ItemSpawnListLUT
[
    ptritemspawnlist                4               uint32          A pointer to a spawn list within ItemSpawnLists.
    ...
]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.
SubHeader                           20 
[
    0x00    ptrDungeonLUT           4               uint32          Pointer to DungeonLUT.
    0x04    ptrFloorDataBlock       4               uint32          Pointer to FloorDataBlock / end of DungeonLUT.
    0x08    ptrItemSpawnListLUT     4               uint32          Pointer to ItemSpawnListLUT.
    0x0C    ptrPkmnSpwnLUT          4               uint32          Pointer to PkmnSpwnLUT.
    0x10    ptrLUTC                 4               uint32          Pointer to LUTC.
]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.
SIR0EncodedPtrList                  vary            -               The standard SIR0 encoded ptr list.
[]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.

==========================================================
Annex
==========================================================

From:
http://www.gamefaqs.com/boards/955859-pokemon-mystery-dungeon-explorers-of-sky/51698562?page=29
Ok guys, I have identified most of the Bytes in the Mappa_s.bin General Floor Information section that I had not previously identified. Here are the ones I have identified:

Byte 1: Floor Layout. This Byte determines the where rooms where be positioned on the floor. Also determines whether a floor will be Crossroads or Outer Square. I am working on recording all possible Floor Layouts from this Byte. I know the following floor configurations:
---01 = Small Floor with rooms positioned in a 2 x 3 layout. 6 Rooms Maximum.
---03 = Outer Square layout
---04 = Crossroads layout
---08 = Small floor with rooms positioned in a 3 x 2 layout. 6 Rooms Maximum.
---0B = Small floor with rooms positioned in a 3 x 3 layout. 9 Rooms Maximum.
The Room Density (Byte 2) apparently affects whether the Maximum will be met or not. If not, the layout could change to a lower room positioning layout, such as 0B giving a 2 x 2 layout if the Room Density is low enough.

Byte 2: Room Density. This Byte determines how many Rooms will be on the floor. The higher the Density, the more Rooms that can appear. The # of Rooms on the floor is affected by both this Byte and the Floor Layout Byte (Byte 1).

Byte 3: Terrain Appearance. This Byte determines the graphical appearance of the walls, floor tiles, and water/lava/air/void tiles.

Byte 4: Music. This Byte determines which Dungeon Music will be playing on that floor.

Byte 6: Hallway Length. This Byte affects the length of hallways. The Higher this number, the longer most hallways will be.

Byte 20: Hallway Density. This Byte determines how many extra room-connecting hallways and dead-end hallways will be on the floor. The Higher this number, the more hallways to traverse.

Byte 22: Water Density. This Byte determine how much of the floor will be covered in water tiles. Also applies to Lava, Air, & Void.

Here are the Bytes I have yet to figure out:

Byte 10: Every entry is 0 or 1. Unsure what this is for.

Byte 12: Every entry is 0 or 1. Unsure what this is for.

Byte 15: Every entry is 0 or 1. Unsure what this is for.

Byte 25: Every entry is the same number for any specific Dungeon. For example, Beach Cave's Floors all have Byte 25 equaling 2, and Treeshroud's Floors all have Byte 25 equaling 13. The Byte's value is always between 2 and 13. I am unsure what this is for. This is NOT related to Secret Power or Nature Power. Probably does not relate to Camouflage. This may relate to Generic Dungeon Music (randomly plays instead of the Main Dungeon Music on some floors), but I have not yet proven this.

Byte 26: Every entry is 0 except for a few random floors of Zero Isle Center and the 4 Rank Dungeons. No idea what this is for.

http://www.gamefaqs.com/boards/955859-pokemon-mystery-dungeon-explorers-of-sky/51698562?page=30
Ok, here are all the possible Floor Layouts based on Byte 1:
---00 = Medium-Large (Biggest: 6 x 4)
---01 = Small (Biggest: 2 x 3)
---02 = One-Room Monster House
---03 = Outer Square (Long hallway around edges of map with 8 rooms inside)
---04 = CrossRoads (3 rooms at top and bottom and 2 rooms at left and right side with a string of hallways in the middle of the map connecting the rooms)
---05 = Two-Room (One of them has a Monster House)
---06 = Line (1 horizontal straight line of 5 rooms)
---07 = Cross (5 Rooms in form of Cross; 3 x 3 with Top Left, Top Right, Bottom Left, and Bottom Right Room missing)
---08 = Small-Medium (Biggest: 4 x 2)
---09 = "Beetle" (1 Giant Room in middle of map with 3 vertical rooms to the left of it and to the right of it)
---0A = Outer Rooms (All Rooms at edge of map; Biggest: 6 x 4 with no rooms in the middle)
---0B = Small-Medium (Biggest: 3 x 3)
---0C = Medium-Large (Biggest: 6 x 4)
---0D = Medium-Large (Biggest: 6 x 4)
---0E = Medium-Large (Biggest: 6 x 4)
---0F = Medium-Large (Biggest: 6 x 4)


==========================================================
mappa_g*.bin
==========================================================
Seems to contain indices for each floors of each dungeons in the corresponding mappa_*.bin file, among other things.

----------------------------------------------------------
Structure 
----------------------------------------------------------

Offset      Name                    Size            Type            Description
----------  ----                    ----            ----            -----------
SIR0Header                          16              -               The standard SIR0 header.
[
    0x00    magicn                  4               -               "SIR0"
    0x04    ptrsubhdr               4               uint32          Pointer to the subheader.
    0x08    ptrptrofftbl            4               uint32          Pointer to the encoded pointer offset table.
    0x0C    null                    4               -               4 bytes of zeros.
]
DungeonDataIndices
[
    DungeonDatIndicesEntry
    [
        unk1                        4               uint32          An unknown index for a floor.. 
        ...
    ]
    ...
]
DungeonLUT
[
    ptrdungeon                      4               uint32          Ptr to a dungeon's entry in DungeonDataIndices.
    ...
]
DataBlockB                                                          Unknown data
[
    ...
]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.
SubHeader
[
    0x00    ptrDungeonLUT           4               uint32          Pointer to DungeonLUT.
    0x04    ptrDataBlockB           4               uint32          Pointer to DataBlockB.
]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.
SIR0EncodedPtrList                  vary            -               The standard SIR0 encoded ptr list.
[]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.





